import { promises as fs } from 'fs';
import path from 'path';
import os from 'os';
import * as yaml from 'js-yaml';
import { logger } from '../utils/utils';
import config from '../config/app-config';
import type { UserSettings } from '../types';

class SettingsManager {
  private settingsFile: string;
  private currentSettings: UserSettings;
  private defaultSettings: UserSettings;

  constructor() {
    this.settingsFile = path.join(os.homedir(), '.prompt-line', 'settings.yml');
    
    // Platform-specific default shortcuts
    const modifier = config.platform.isMac ? 'Cmd' : 'Ctrl';
    
    this.defaultSettings = {
      shortcuts: {
        main: `${modifier}+Shift+Space`,
        paste: `${modifier}+Enter`,
        close: 'Escape',
        historyNext: 'Ctrl+j',
        historyPrev: 'Ctrl+k',
        search: `${modifier}+f`
      },
      window: {
        position: 'active-text-field',
        width: 600,
        height: 300
      },
      ignore_apps: []
    };

    this.currentSettings = { ...this.defaultSettings };
  }

  async init(): Promise<void> {
    try {
      await this.loadSettings();
      logger.debug('Settings manager initialized successfully');
    } catch (error) {
      logger.error('Failed to initialize settings manager:', error);
      throw error;
    }
  }

  private async loadSettings(): Promise<void> {
    try {
      await fs.mkdir(path.dirname(this.settingsFile), { recursive: true });

      try {
        const data = await fs.readFile(this.settingsFile, 'utf8');
        const parsed = yaml.load(data) as UserSettings;
        
        if (parsed && typeof parsed === 'object') {
          this.currentSettings = this.mergeWithDefaults(parsed);
          logger.debug('Settings loaded from YAML file', { 
            file: this.settingsFile
          });
        } else {
          logger.warn('Invalid settings file format, using defaults');
          await this.saveSettings();
        }
      } catch (error) {
        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {
          logger.info('Settings file not found, creating with defaults');
          await this.saveSettings();
        } else {
          logger.error('Failed to read settings file:', error);
          throw error;
        }
      }
    } catch (error) {
      logger.error('Failed to load settings:', error);
      throw error;
    }
  }

  private mergeWithDefaults(userSettings: Partial<UserSettings>): UserSettings {
    return {
      shortcuts: {
        ...this.defaultSettings.shortcuts,
        ...userSettings.shortcuts
      },
      window: {
        ...this.defaultSettings.window,
        ...userSettings.window
      },
      ignore_apps: userSettings.ignore_apps || this.defaultSettings.ignore_apps || []
    };
  }

  async saveSettings(): Promise<void> {
    try {
      const settingsWithComments = this.addCommentsToSettings(this.currentSettings);
      
      await fs.writeFile(this.settingsFile, settingsWithComments, 'utf8');
      logger.debug('Settings saved to YAML file', { file: this.settingsFile });
    } catch (error) {
      logger.error('Failed to save settings:', error);
      throw error;
    }
  }

  private addCommentsToSettings(settings: UserSettings): string {
    return `# Prompt Line Settings Configuration
# This file is automatically generated but can be manually edited

# Keyboard shortcuts configuration
shortcuts:
  # Global shortcut to show/hide the input window
  # Format: Modifier+Key (e.g., Cmd+Shift+Space, Ctrl+Alt+Space)
  # Available modifiers: Cmd, Ctrl, Alt, Shift
  main: ${settings.shortcuts.main}
  
  # Shortcut to paste selected text and close window
  # Used when typing in the input window
  paste: ${settings.shortcuts.paste}
  
  # Shortcut to close window without pasting
  # Used to cancel input and close window
  close: ${settings.shortcuts.close}
  
  # Shortcut to navigate to next history item
  # Used when browsing paste history
  historyNext: ${settings.shortcuts.historyNext}
  
  # Shortcut to navigate to previous history item
  # Used when browsing paste history
  historyPrev: ${settings.shortcuts.historyPrev}
  
  # Shortcut to enable search mode in history
  # Used to filter paste history items
  search: ${settings.shortcuts.search}

# Window appearance and positioning configuration
window:
  # Window positioning mode
  # Options:
  #   - 'active-text-field': Position near the currently focused text field (default, falls back to active-window-center)
  #   - 'active-window-center': Center within the currently active window
  #   - 'cursor': Position at mouse cursor location
  #   - 'center': Center on primary display
  position: ${settings.window.position}
  
  # Window width in pixels
  # Recommended range: 400-800 pixels
  width: ${settings.window.width}
  
  # Window height in pixels
  # Recommended range: 200-400 pixels
  height: ${settings.window.height}

# Application filtering configuration  
# List of application names to ignore when the main shortcut is pressed
# This is useful for multi-platform environments (e.g., Parallels, VMware)
# Format: List of app names (case-sensitive)
ignore_apps:${settings.ignore_apps?.length ? settings.ignore_apps.map(app => `\n  - ${app}`).join('') : ' []'}
`;
  }

  getSettings(): UserSettings {
    return { ...this.currentSettings };
  }

  async updateSettings(newSettings: Partial<UserSettings>): Promise<void> {
    try {
      this.currentSettings = this.mergeWithDefaults({
        ...this.currentSettings,
        ...newSettings
      });

      await this.saveSettings();
      logger.info('Settings updated successfully');
    } catch (error) {
      logger.error('Failed to update settings:', error);
      throw error;
    }
  }

  async resetSettings(): Promise<void> {
    try {
      this.currentSettings = { ...this.defaultSettings };
      await this.saveSettings();
      logger.info('Settings reset to defaults');
    } catch (error) {
      logger.error('Failed to reset settings:', error);
      throw error;
    }
  }

  getShortcuts(): UserSettings['shortcuts'] {
    return { ...this.currentSettings.shortcuts };
  }

  async updateShortcuts(shortcuts: Partial<UserSettings['shortcuts']>): Promise<void> {
    await this.updateSettings({
      shortcuts: {
        ...this.currentSettings.shortcuts,
        ...shortcuts
      }
    });
  }

  getWindowSettings(): UserSettings['window'] {
    return { ...this.currentSettings.window };
  }

  async updateWindowSettings(window: Partial<UserSettings['window']>): Promise<void> {
    await this.updateSettings({
      window: {
        ...this.currentSettings.window,
        ...window
      }
    });
  }

  getIgnoreApps(): string[] {
    return this.currentSettings.ignore_apps ? [...this.currentSettings.ignore_apps] : [];
  }

  async updateIgnoreApps(ignore_apps: string[]): Promise<void> {
    await this.updateSettings({
      ignore_apps: [...ignore_apps]
    });
  }

  getDefaultSettings(): UserSettings {
    return {
      shortcuts: { ...this.defaultSettings.shortcuts },
      window: { ...this.defaultSettings.window },
      ignore_apps: this.defaultSettings.ignore_apps ? [...this.defaultSettings.ignore_apps] : []
    };
  }

  getSettingsFilePath(): string {
    return this.settingsFile;
  }
}

export default SettingsManager;